// Generated by 'peg2'
// https://pub.dev/packages/peg2

void main() {
  final parser = ExampleParser();
  final result = parser.parse(_text);
  if (parser.error != null) {
    throw parser.error;
  }

  print(result);
}

final _text = '''
{"rocket": "ðŸš€ flies to the stars"}
''';

class ExampleParser {
  static const _eof = 0x110000;

  FormatException error;

  int _c;

  int _error;

  List<String> _expected;

  int _failure;

  List<int> _input;

  List<bool> _memoizable;

  List<List<_Memo>> _memos;

  var _mresult;

  int _pos;

  bool _predicate;

  dynamic _result;

  bool _success;

  String _text;

  List<int> _trackCid;

  List<int> _trackPos;

  dynamic parse(String text) {
    if (text == null) {
      throw ArgumentError.notNull('text');
    }
    _text = text;
    _input = _toRunes(text);
    _reset();
    final result = _e0(0, true);
    _buildError();
    _expected = null;
    _input = null;
    return result;
  }

  void _buildError() {
    if (_success) {
      error = null;
      return;
    }

    String escape(int c) {
      switch (c) {
        case 10:
          return r'\n';
        case 13:
          return r'\r';
        case 09:
          return r'\t';
        case _eof:
          return 'end of file';
      }
      return String.fromCharCode(c);
    }

    String getc(int position) {
      if (position < _text.length) {
        return "'${escape(_input[position])}'";
      }
      return 'end of file';
    }

    String report(String message, String source, int start) {
      if (start < 0 || start > source.length) {
        start = null;
      }

      final sb = StringBuffer();
      sb.write(message);
      var line = 0;
      var col = 0;
      var lineStart = 0;
      var started = false;
      if (start != null) {
        for (var i = 0; i < source.length; i++) {
          final c = source.codeUnitAt(i);
          if (!started) {
            started = true;
            lineStart = i;
            line++;
            col = 1;
          } else {
            col++;
          }
          if (c == 10) {
            started = false;
          }
          if (start == i) {
            break;
          }
        }
      }

      if (start == null) {
        sb.writeln('.');
      } else if (line == 0 || start == source.length) {
        sb.write(' (at offset ');
        sb.write(start);
        sb.writeln('):');
      } else {
        sb.write(' (at line ');
        sb.write(line);
        sb.write(', column ');
        sb.write(col);
        sb.writeln('):');
      }

      List<int> escape(int c) {
        switch (c) {
          case 9:
            return [92, 116];
          case 10:
            return [92, 110];
          case 13:
            return [92, 114];
          default:
            return [c];
        }
      }

      const max = 70;
      if (start != null) {
        final c1 = <int>[];
        final c2 = <int>[];
        final half = max ~/ 2;
        var cr = false;
        for (var i = start; i >= lineStart && c1.length < half; i--) {
          if (i == source.length) {
            c2.insert(0, 94);
          } else {
            final c = source.codeUnitAt(i);
            final escaped = escape(c);
            c1.insertAll(0, escaped);
            if (c == 10) {
              cr = true;
            }

            final r = i == start ? 94 : 32;
            for (var k = 0; k < escaped.length; k++) {
              c2.insert(0, r);
            }
          }
        }

        for (var i = start + 1;
            i < source.length && c1.length < max && !cr;
            i++) {
          final c = source.codeUnitAt(i);
          final escaped = escape(c);
          c1.addAll(escaped);
          if (c == 10) {
            break;
          }
        }

        final text1 = String.fromCharCodes(c1);
        final text2 = String.fromCharCodes(c2);
        sb.writeln(text1);
        sb.writeln(text2);
      }

      return sb.toString();
    }

    final temp = _expected.toList();
    temp.sort((e1, e2) => e1.compareTo(e2));
    final expected = temp.toSet();
    final hasMalformed = false;
    if (expected.isNotEmpty) {
      if (!hasMalformed) {
        final sb = StringBuffer();
        sb.write('Expected ');
        sb.write(expected.join(', '));
        sb.write(' but found ');
        sb.write(getc(_error));
        final title = sb.toString();
        final message = report(title, _text, _error);
        error = FormatException(message);
      } else {
        final reason = _error == _text.length ? 'Unterminated' : 'Malformed';
        final sb = StringBuffer();
        sb.write(reason);
        sb.write(' ');
        sb.write(expected.join(', '));
        final title = sb.toString();
        final message = report(title, _text, _error);
        error = FormatException(message);
      }
    } else {
      final sb = StringBuffer();
      sb.write('Unexpected character ');
      sb.write(getc(_error));
      final title = sb.toString();
      final message = report(title, _text, _error);
      error = FormatException(message);
    }
  }

  void _fail(List<String> expected) {
    if (_error < _failure) {
      _error = _failure;
      _expected = [];
    }
    if (_error == _failure) {
      _expected.addAll(expected);
    }
  }

  int _matchRanges(List<int> ranges) {
    int result;
    _success = false;
    for (var i = 0; i < ranges.length; i += 2) {
      if (ranges[i] <= _c) {
        if (ranges[i + 1] >= _c) {
          result = _c;
          _c = _input[_pos += _c <= 0xffff ? 1 : 2];
          _success = true;
          break;
        }
      } else {
        break;
      }
    }

    if (!_success) {
      _failure = _pos;
    }

    return result;
  }

  String _matchString(String text) {
    String result;
    final length = text.length;
    final rest = _text.length - _pos;
    final count = length > rest ? rest : length;
    var pos = _pos;
    var i = 0;
    for (; i < count; i++, pos++) {
      if (text.codeUnitAt(i) != _text.codeUnitAt(pos)) {
        break;
      }
    }

    if (_success = i == length) {
      _c = _input[_pos += length];
      result = text;
    } else {
      _failure = _pos + i;
    }

    return result;
  }

  bool _memoized(int id, int cid) {
    final memos = _memos[_pos];
    if (memos != null) {
      for (var i = 0; i < memos.length; i++) {
        final memo = memos[i];
        if (memo.id == id) {
          _pos = memo.pos;
          _mresult = memo.result;
          _success = memo.success;
          _c = _input[_pos];
          return true;
        }
      }
    }

    if (_memoizable[cid] != null) {
      return false;
    }

    final lastCid = _trackCid[id];
    final lastPos = _trackPos[id];
    _trackCid[id] = cid;
    _trackPos[id] = _pos;
    if (lastCid == null) {
      return false;
    }

    if (lastPos == _pos) {
      if (lastCid != cid) {
        _memoizable[lastCid] = true;
        _memoizable[cid] = false;
      }
    }

    return false;
  }

  void _memoize(int id, int pos, result) {
    var memos = _memos[pos];
    if (memos == null) {
      memos = [];
      _memos[pos] = memos;
    }

    final memo = _Memo(
      id: id,
      pos: _pos,
      result: result,
      success: _success,
    );

    memos.add(memo);
  }

  void _reset() {
    _c = _input[0];
    _error = 0;
    _expected = [];
    _failure = -1;
    _memoizable = [];
    _memoizable.length = 183;
    _memos = [];
    _memos.length = _input.length + 1;
    _pos = 0;
    _predicate = false;
    _success = false;
    _trackCid = [];
    _trackCid.length = 183;
    _trackPos = [];
    _trackPos.length = 183;
  }

  List<int> _toRunes(String source) {
    final length = source.length;
    final result = List<int>(length + 1);
    for (var pos = 0; pos < length;) {
      int c;
      final start = pos;
      final leading = source.codeUnitAt(pos++);
      if ((leading & 0xFC00) == 0xD800 && pos < length) {
        final trailing = source.codeUnitAt(pos);
        if ((trailing & 0xFC00) == 0xDC00) {
          c = 0x10000 + ((leading & 0x3FF) << 10) + (trailing & 0x3FF);
          pos++;
        } else {
          c = leading;
        }
      } else {
        c = leading;
      }

      result[start] = c;
    }

    result[length] = 0x110000;
    return result;
  }

  dynamic _e0(int $00, bool $01) {
    final $02 = _c;
    final $03 = _pos;
    dynamic $04;
    for (;;) {
      if ($02 >= 0 && $02 <= 1114111) {
        int $05;
        if (_c >= 9 && _c <= 10 || _c == 13 || _c == 32) {
          _success = true;
          $05 = _c;
          _c = _input[++_pos];
        } else {
          _success = false;
          _failure = _pos;
        }
        List<int> $06;
        if ($01) {}
        for (;;) {
          int $07;
          if (_c >= 9 && _c <= 10 || _c == 13 || _c == 32) {
            _success = true;
            $07 = _c;
            _c = _input[++_pos];
          } else {
            _success = false;
            _failure = _pos;
          }
          if (!_success) {
            break;
          }
          $06.add($07);
        }
        final $08 = _e180($06, $00, $01);
        List<int> $09 = $08;
        final $010 = _e63($09, $00, $01);
        List<int> $011 = $010;
        List<int> $012 = $011;
        final $013 = _e1($012, $00, $01);
        dynamic $014 = $013;
        if (_success) {
          $04 = $014;
          break;
        }
        _c = $02;
        _pos = $03;
      }
    }
    return $04;
    return $04;
  }

  dynamic _e6(int $00, bool $01) {
    final $02 = _c;
    final $03 = _pos;
    dynamic $04;
    for (;;) {
      if ($02 >= 34 && $02 <= 90) {
        int $05;
        if (_c == 45) {
          _success = true;
          $05 = _c;
          _c = _input[++_pos];
        } else {
          _success = false;
          _failure = _pos;
        }
        int $06 = $05;
        final $07 = _e84($06, $00, $01);
        int $08 = $07;
        final $09 = _text.substring($03, _pos);
        final $010 = _e81($09, $00, $01);
        num $011 = $010;
        final $012 = _e17($011, $00, $01);
        dynamic $013 = $012;
        if (_success) {
          $04 = $013;
          break;
        }
        _c = $02;
        _pos = $03;
        final $014 = '\"';
        _success = true;
        _c = _input[++_pos];
        final $015 = _e74($014, $00, $01);
        String $016 = $015;
        final $017 = _e19($016, $00, $01);
        dynamic $018 = $017;
        if (_success) {
          $04 = $018;
          break;
        }
        _c = $02;
        _pos = $03;
      }
      if ($02 == 91) {
        final $019 = '[';
        _success = true;
        _c = _input[++_pos];
        final $020 = _e118($019, $00, $01);
        String $021 = $020;
        final $022 = _e22($021, $00, $01);
        List $023 = $022;
        final $024 = _e7($023, $00, $01);
        dynamic $025 = $024;
        if (_success) {
          $04 = $025;
          break;
        }
        _c = $02;
        _pos = $03;
        int $026;
        if (_c == 45) {
          _success = true;
          $026 = _c;
          _c = _input[++_pos];
        } else {
          _success = false;
          _failure = _pos;
        }
        int $027 = $026;
        final $028 = _e84($027, $00, $01);
        int $029 = $028;
        final $030 = _text.substring($03, _pos);
        final $031 = _e81($030, $00, $01);
        num $032 = $031;
        final $033 = _e17($032, $00, $01);
        dynamic $034 = $033;
        if (_success) {
          $04 = $034;
          break;
        }
        _c = $02;
        _pos = $03;
      }
      if ($02 >= 92 && $02 <= 101 ||
          $02 >= 103 && $02 <= 109 ||
          $02 >= 111 && $02 <= 115 ||
          $02 >= 117 && $02 <= 122 ||
          $02 >= 124 && $02 <= 1114111) {
        int $035;
        if (_c == 45) {
          _success = true;
          $035 = _c;
          _c = _input[++_pos];
        } else {
          _success = false;
          _failure = _pos;
        }
        int $036 = $035;
        final $037 = _e84($036, $00, $01);
        int $038 = $037;
        final $039 = _text.substring($03, _pos);
        final $040 = _e81($039, $00, $01);
        num $041 = $040;
        final $042 = _e17($041, $00, $01);
        dynamic $043 = $042;
        if (_success) {
          $04 = $043;
          break;
        }
        _c = $02;
        _pos = $03;
      }
      if ($02 == 102) {
        final $044 = _matchString('false');
        final $045 = _e59($044, $00, $01);
        dynamic $046 = $045;
        final $047 = _e9($046, $00, $01);
        dynamic $048 = $047;
        if (_success) {
          $04 = $048;
          break;
        }
        _c = $02;
        _pos = $03;
        int $049;
        if (_c == 45) {
          _success = true;
          $049 = _c;
          _c = _input[++_pos];
        } else {
          _success = false;
          _failure = _pos;
        }
        int $050 = $049;
        final $051 = _e84($050, $00, $01);
        int $052 = $051;
        final $053 = _text.substring($03, _pos);
        final $054 = _e81($053, $00, $01);
        num $055 = $054;
        final $056 = _e17($055, $00, $01);
        dynamic $057 = $056;
        if (_success) {
          $04 = $057;
          break;
        }
        _c = $02;
        _pos = $03;
      }
      if ($02 == 110) {
        final $058 = _matchString('null');
        final $059 = _e66($058, $00, $01);
        dynamic $060 = $059;
        final $061 = _e11($060, $00, $01);
        dynamic $062 = $061;
        if (_success) {
          $04 = $062;
          break;
        }
        _c = $02;
        _pos = $03;
        int $063;
        if (_c == 45) {
          _success = true;
          $063 = _c;
          _c = _input[++_pos];
        } else {
          _success = false;
          _failure = _pos;
        }
        int $064 = $063;
        final $065 = _e84($064, $00, $01);
        int $066 = $065;
        final $067 = _text.substring($03, _pos);
        final $068 = _e81($067, $00, $01);
        num $069 = $068;
        final $070 = _e17($069, $00, $01);
        dynamic $071 = $070;
        if (_success) {
          $04 = $071;
          break;
        }
        _c = $02;
        _pos = $03;
      }
      if ($02 == 116) {
        final $072 = _matchString('true');
        final $073 = _e70($072, $00, $01);
        dynamic $074 = $073;
        final $075 = _e13($074, $00, $01);
        dynamic $076 = $075;
        if (_success) {
          $04 = $076;
          break;
        }
        _c = $02;
        _pos = $03;
        int $077;
        if (_c == 45) {
          _success = true;
          $077 = _c;
          _c = _input[++_pos];
        } else {
          _success = false;
          _failure = _pos;
        }
        int $078 = $077;
        final $079 = _e84($078, $00, $01);
        int $080 = $079;
        final $081 = _text.substring($03, _pos);
        final $082 = _e81($081, $00, $01);
        num $083 = $082;
        final $084 = _e17($083, $00, $01);
        dynamic $085 = $084;
        if (_success) {
          $04 = $085;
          break;
        }
        _c = $02;
        _pos = $03;
      }
      if ($02 == 123) {
        final $086 = '{';
        _success = true;
        _c = _input[++_pos];
        final $087 = _e110($086, $00, $01);
        String $088 = $087;
        final $089 = _e36($088, $00, $01);
        Map<String, dynamic> $090 = $089;
        final $091 = _e15($090, $00, $01);
        dynamic $092 = $091;
        if (_success) {
          $04 = $092;
          break;
        }
        _c = $02;
        _pos = $03;
        int $093;
        if (_c == 45) {
          _success = true;
          $093 = _c;
          _c = _input[++_pos];
        } else {
          _success = false;
          _failure = _pos;
        }
        int $094 = $093;
        final $095 = _e84($094, $00, $01);
        int $096 = $095;
        final $097 = _text.substring($03, _pos);
        final $098 = _e81($097, $00, $01);
        num $099 = $098;
        final $0100 = _e17($099, $00, $01);
        dynamic $0101 = $0100;
        if (_success) {
          $04 = $0101;
          break;
        }
        _c = $02;
        _pos = $03;
      }
    }
    return $04;
    return $04;
  }

  int _e133(int $00, bool $01) {
    final $02 = _c;
    final $03 = _pos;
    int $04;
    for (;;) {
      if ($02 >= 32 && $02 <= 33 ||
          $02 >= 35 && $02 <= 91 ||
          $02 >= 93 && $02 <= 1114111) {
        final $05 = _c;
        _success = true;
        _c = _input[_pos += _c <= 65535 ? 1 : 2];
        final $06 = _e173($05, $00, $01);
        int $07 = $06;
        final $08 = _e137($07, $00, $01);
        int $09 = $08;
        if (_success) {
          $04 = $09;
          break;
        }
        _c = $02;
        _pos = $03;
      }
      if ($02 == 92) {
        final $010 = _c;
        _success = true;
        _c = _input[++_pos];
        final $011 = _e134($010, $00, $01);
        int $012 = $011;
        if (_success) {
          $04 = $012;
          break;
        }
        _c = $02;
        _pos = $03;
      }
    }
    return $04;
    return $04;
  }

  List _e27(int $00, bool $01) {
    final $02 = _c;
    final $03 = _pos;
    List $04;
    for (;;) {
      if ($02 >= 0 && $02 <= 1114111) {
        String $05;
        if (_c == 91) {
          _success = true;
          $05 = '[';
          _c = _input[++_pos];
        } else {
          _success = false;
          _failure = _pos;
        }
        final $06 = _e118($05, $00, $01);
        String $07 = $06;
        final $08 = _e22($07, $00, $01);
        List $09 = $08;
        final $010 = _e7($09, $00, $01);
        dynamic $011 = $010;
        final $012 = _e28($011, $00, $01);
        List $013 = $012;
        if (_success) {
          $04 = $013;
          break;
        }
        _c = $02;
        _pos = $03;
      }
    }
    return $04;
    return $04;
  }

  List<MapEntry<String, dynamic>> _e41(int $00, bool $01) {
    final $02 = _c;
    final $03 = _pos;
    List<MapEntry<String, dynamic>> $04;
    for (;;) {
      if ($02 == 34) {
        final $05 = '\"';
        _success = true;
        _c = _input[++_pos];
        final $06 = _e74($05, $00, $01);
        String $07 = $06;
        final $08 = _e50($07, $00, $01);
        MapEntry<String, dynamic> $09 = $08;
        final $010 = _e42($09, $00, $01);
        List<MapEntry<String, dynamic>> $011 = $010;
        if (_success) {
          $04 = $011;
          break;
        }
        _c = $02;
        _pos = $03;
      }
    }
    return $04;
    return $04;
  }

  String _e129(int $00, bool $01) {
    final $02 = _c;
    final $03 = _pos;
    String $04;
    for (;;) {
      if ($02 == 58) {
        final $05 = ':';
        _success = true;
        _c = _input[++_pos];
        final $06 = _e130($05, $00, $01);
        String $07 = $06;
        if (_success) {
          $04 = $07;
          break;
        }
        _c = $02;
        _pos = $03;
      }
    }
    return $04;
    return $04;
  }

  List<int> _e180(List<int> $00, int $01, bool $02) {
    List<int> $03;
    $03 = $00;
  }

  List<int> _e63(List<int> $00, int $01, bool $02) {
    List<int> $03;
    $03 = $00;
  }

  dynamic _e1(List<int> $00, int $01, bool $02) {
    dynamic $03;
    final $04 = _e6(4, $02);
    if (_success) {
      if (_success) {
        $03 = $04;
      }
    }
  }

  int _e84(int $00, int $01, bool $02) {
    int $03;
    final $04 = _c;
    final $05 = _pos;
    int $06;
    for (;;) {
      if ($04 == 48) {
        int $07;
        _success = true;
        _c = _input[++_pos];
        final $08 = _e88($07, $01, $02);
        int $09 = $08;
        if (_success) {
          $06 = $09;
          break;
        }
        _c = $04;
        _pos = $05;
      }
      if ($04 >= 49 && $04 <= 57) {
        int $010;
        _success = true;
        _c = _input[++_pos];
        final $011 = _e90($010, $01, $02);
        int $012 = $011;
        if (_success) {
          $06 = $012;
          break;
        }
        _c = $04;
        _pos = $05;
      }
    }
    if (_success) {
      final $013 = _c;
      final $014 = _pos;
      int $015;
      for (;;) {
        if ($013 == 46) {
          int $016;
          _success = true;
          _c = _input[++_pos];
          final $017 = _e96($016, $01, $02);
          int $018 = $017;
          if (_success) {
            $015 = $018;
            break;
          }
          _c = $013;
          _pos = $014;
        }
      }
      final $019 = $015;
      $03 = $00;
    }
  }

  int _e88(int $00, int $01, bool $02) {
    int $03;
    if (_success) {
      $03 = $00;
    }
  }

  int _e90(int $00, int $01, bool $02) {
    int $03;
    $03 = $00;
  }

  int _e96(int $00, int $01, bool $02) {
    int $03;
    if (_success) {
      $03 = $00;
    }
  }

  num _e81(String $00, int $01, bool $02) {
    num $03;
    if (_success) {
      final n = $00;
      num $$;
      $$ = num.parse(n);
      $03 = $$;
    }
  }

  num _e17(num $00, int $01, bool $02) {
    num $03;
    if (_success) {
      $03 = $00;
    }
  }

  String _e74(String $00, int $01, bool $02) {
    String $03;
    List<int> $04;
    if ($02) {
      $04 = [];
    }
    for (;;) {
      final $05 = _e133(77, $02);
      if (!_success) {
        _success = true;
        break;
      }
      if ($02) {
        $04.add($05);
      }
    }
    String $06;
    if (_c == 34) {
      _success = true;
      _c = _input[++_pos];
    } else {
      _success = false;
      _failure = _pos;
    }
    if (_success) {
      if (_success) {
        final c = $04;
        String $$;
        $$ = String.fromCharCodes(c);
        $03 = $$;
      }
    }
  }

  String _e19(String $00, int $01, bool $02) {
    String $03;
    if (_success) {
      $03 = $00;
    }
  }

  String _e118(String $00, int $01, bool $02) {
    String $03;
    $03 = $00;
  }

  List _e22(String $00, int $01, bool $02) {
    List $03;
    final $04 = _e27(25, $02);
    final $05 = $04;
    if (_success) {
      final v = $05;
      List $$;
      $$ = v ?? [];
      $03 = $$;
    }
  }

  List _e7(List $00, int $01, bool $02) {
    List $03;
    if (_success) {
      $03 = $00;
    }
  }

  dynamic _e59(String $00, int $01, bool $02) {
    dynamic $03;
    if (_success) {
      dynamic $$;
      $$ = false;
      $03 = $$;
    }
  }

  dynamic _e9(dynamic $00, int $01, bool $02) {
    dynamic $03;
    if (_success) {
      $03 = $00;
    }
  }

  dynamic _e66(String $00, int $01, bool $02) {
    dynamic $03;
    if (_success) {
      dynamic $$;
      $$ = null;
      $03 = $$;
    }
  }

  dynamic _e11(dynamic $00, int $01, bool $02) {
    dynamic $03;
    if (_success) {
      $03 = $00;
    }
  }

  dynamic _e70(String $00, int $01, bool $02) {
    dynamic $03;
    if (_success) {
      dynamic $$;
      $$ = true;
      $03 = $$;
    }
  }

  dynamic _e13(dynamic $00, int $01, bool $02) {
    dynamic $03;
    if (_success) {
      $03 = $00;
    }
  }

  String _e110(String $00, int $01, bool $02) {
    String $03;
    $03 = $00;
  }

  Map<String, dynamic> _e36(String $00, int $01, bool $02) {
    Map<String, dynamic> $03;
    final $04 = _e41(39, $02);
    final $05 = $04;
    if (_success) {
      final m = $05;
      Map<String, dynamic> $$;
      $$ = <String, dynamic>{}..addEntries(m ?? []);
      $03 = $$;
    }
  }

  Map<String, dynamic> _e15(Map<String, dynamic> $00, int $01, bool $02) {
    Map<String, dynamic> $03;
    if (_success) {
      $03 = $00;
    }
  }

  int _e173(int $00, int $01, bool $02) {
    int $03;
    if (_success) {
      $03 = $00;
    }
  }

  int _e137(int $00, int $01, bool $02) {
    int $03;
    if (_success) {
      $03 = $00;
    }
  }

  int _e134(int $00, int $01, bool $02) {
    int $03;
    if (_success) {
      $03 = $00;
    }
  }

  List _e28(dynamic $00, int $01, bool $02) {
    List $03;
    if (_success) {
      final v = $00;
      List $$;
      $$ = [v, ...n];
      $03 = $$;
    }
  }

  MapEntry<String, dynamic> _e50(String $00, int $01, bool $02) {
    MapEntry<String, dynamic> $03;
    final $04 = _e129(52, $02);
    if (_success) {
      if (_success) {
        final k = $00;
        MapEntry<String, dynamic> $$;
        $$ = MapEntry(k, v);
        $03 = $$;
      }
    }
  }

  List<MapEntry<String, dynamic>> _e42(
      MapEntry<String, dynamic> $00, int $01, bool $02) {
    List<MapEntry<String, dynamic>> $03;
    if (_success) {
      final m = $00;
      List<MapEntry<String, dynamic>> $$;
      $$ = [m, ...n];
      $03 = $$;
    }
  }

  String _e130(String $00, int $01, bool $02) {
    String $03;
    $03 = $00;
  }
}

class _Memo {
  final int id;

  final int pos;

  final result;

  final bool success;

  _Memo({
    this.id,
    this.pos,
    this.result,
    this.success,
  });
}

// ignore_for_file: unused_element
// ignore_for_file: unused_field
