// Generated by 'peg2'
// https://pub.dev/packages/peg2

import 'package:peg2/grammar.dart';
import 'package:peg2/expressions.dart';

int _escape(int c) {
  switch (c) {
    case 110:
      return 0xA;
    case 114:
      return 0xD;
    case 116:
      return 0x9;
  }

  return c;
}

Expression _prefix(String prefix, Expression expression, String variable) {
  switch (prefix) {
    case '&':
      expression = AndPredicateExpression(expression);
      break;
    case '!':
      expression = NotPredicateExpression(expression);
      break;
  }

  expression.variable = variable;
  return expression;
}

Expression _suffix(String suffix, Expression expression) {
  switch (suffix) {
    case '?':
      return OptionalExpression(expression);
    case '*':
      return ZeroOrMoreExpression(expression);
    case '+':
      return OneOrMoreExpression(expression);
  }

  return expression;
}

class Peg2Parser {
  static const _eof = 0x110000;

  FormatException error;

  int _c;

  int _error;

  List<String> _expected;

  int _failure;

  List<int> _input;

  List<bool> _memoizable;

  List<List<_Memo>> _memos;

  var _mresult;

  int _pos;

  bool _predicate;

  dynamic _result;

  bool _success;

  String _text;

  List<int> _trackCid;

  List<int> _trackPos;

  dynamic parse(String text) {
    if (text == null) {
      throw ArgumentError.notNull('text');
    }
    _text = text;
    _input = _toRunes(text);
    _reset();
    final result = _parseGrammar(0, true);
    _buildError();
    _expected = null;
    _input = null;
    return result;
  }

  void _buildError() {
    if (_success) {
      error = null;
      return;
    }

    String escape(int c) {
      switch (c) {
        case 10:
          return r'\n';
        case 13:
          return r'\r';
        case 09:
          return r'\t';
        case _eof:
          return 'end of file';
      }
      return String.fromCharCode(c);
    }

    String getc(int position) {
      if (position < _text.length) {
        return "'${escape(_input[position])}'";
      }
      return 'end of file';
    }

    String report(String message, String source, int start) {
      if (start < 0 || start > source.length) {
        start = null;
      }

      final sb = StringBuffer();
      sb.write(message);
      var line = 0;
      var col = 0;
      var lineStart = 0;
      var started = false;
      if (start != null) {
        for (var i = 0; i < source.length; i++) {
          final c = source.codeUnitAt(i);
          if (!started) {
            started = true;
            lineStart = i;
            line++;
            col = 1;
          } else {
            col++;
          }
          if (c == 10) {
            started = false;
          }
          if (start == i) {
            break;
          }
        }
      }

      if (start == null) {
        sb.writeln('.');
      } else if (line == 0 || start == source.length) {
        sb.write(' (at offset ');
        sb.write(start);
        sb.writeln('):');
      } else {
        sb.write(' (at line ');
        sb.write(line);
        sb.write(', column ');
        sb.write(col);
        sb.writeln('):');
      }

      List<int> escape(int c) {
        switch (c) {
          case 9:
            return [92, 116];
          case 10:
            return [92, 110];
          case 13:
            return [92, 114];
          default:
            return [c];
        }
      }

      const max = 70;
      if (start != null) {
        final c1 = <int>[];
        final c2 = <int>[];
        final half = max ~/ 2;
        var cr = false;
        for (var i = start; i >= lineStart && c1.length < half; i--) {
          if (i == source.length) {
            c2.insert(0, 94);
          } else {
            final c = source.codeUnitAt(i);
            final escaped = escape(c);
            c1.insertAll(0, escaped);
            if (c == 10) {
              cr = true;
            }

            final r = i == start ? 94 : 32;
            for (var k = 0; k < escaped.length; k++) {
              c2.insert(0, r);
            }
          }
        }

        for (var i = start + 1;
            i < source.length && c1.length < max && !cr;
            i++) {
          final c = source.codeUnitAt(i);
          final escaped = escape(c);
          c1.addAll(escaped);
          if (c == 10) {
            break;
          }
        }

        final text1 = String.fromCharCodes(c1);
        final text2 = String.fromCharCodes(c2);
        sb.writeln(text1);
        sb.writeln(text2);
      }

      return sb.toString();
    }

    final temp = _expected.toList();
    temp.sort((e1, e2) => e1.compareTo(e2));
    final expected = temp.toSet();
    final hasMalformed = false;
    if (expected.isNotEmpty) {
      if (!hasMalformed) {
        final sb = StringBuffer();
        sb.write('Expected ');
        sb.write(expected.join(', '));
        sb.write(' but found ');
        sb.write(getc(_error));
        final title = sb.toString();
        final message = report(title, _text, _error);
        error = FormatException(message);
      } else {
        final reason = _error == _text.length ? 'Unterminated' : 'Malformed';
        final sb = StringBuffer();
        sb.write(reason);
        sb.write(' ');
        sb.write(expected.join(', '));
        final title = sb.toString();
        final message = report(title, _text, _error);
        error = FormatException(message);
      }
    } else {
      final sb = StringBuffer();
      sb.write('Unexpected character ');
      sb.write(getc(_error));
      final title = sb.toString();
      final message = report(title, _text, _error);
      error = FormatException(message);
    }
  }

  void _fail(List<String> expected) {
    if (_error < _failure) {
      _error = _failure;
      _expected = [];
    }
    if (_error == _failure) {
      _expected.addAll(expected);
    }
  }

  int _matchRanges(List<int> ranges) {
    int result;
    _success = false;
    for (var i = 0; i < ranges.length; i += 2) {
      if (ranges[i] <= _c) {
        if (ranges[i + 1] >= _c) {
          result = _c;
          _c = _input[_pos += _c <= 0xffff ? 1 : 2];
          _success = true;
          break;
        }
      } else {
        break;
      }
    }

    if (!_success) {
      _failure = _pos;
    }

    return result;
  }

  String _matchString(String text) {
    String result;
    final length = text.length;
    final rest = _text.length - _pos;
    final count = length > rest ? rest : length;
    var pos = _pos;
    var i = 0;
    for (; i < count; i++, pos++) {
      if (text.codeUnitAt(i) != _text.codeUnitAt(pos)) {
        break;
      }
    }

    if (_success = i == length) {
      _c = _input[_pos += length];
      result = text;
    } else {
      _failure = _pos + i;
    }

    return result;
  }

  bool _memoized(int id, int cid) {
    final memos = _memos[_pos];
    if (memos != null) {
      for (var i = 0; i < memos.length; i++) {
        final memo = memos[i];
        if (memo.id == id) {
          _pos = memo.pos;
          _mresult = memo.result;
          _success = memo.success;
          _c = _input[_pos];
          return true;
        }
      }
    }

    if (_memoizable[cid] != null) {
      return false;
    }

    final lastCid = _trackCid[id];
    final lastPos = _trackPos[id];
    _trackCid[id] = cid;
    _trackPos[id] = _pos;
    if (lastCid == null) {
      return false;
    }

    if (lastPos == _pos) {
      if (lastCid != cid) {
        _memoizable[lastCid] = true;
        _memoizable[cid] = false;
      }
    }

    return false;
  }

  void _memoize(int id, int pos, result) {
    var memos = _memos[pos];
    if (memos == null) {
      memos = [];
      _memos[pos] = memos;
    }

    final memo = _Memo(
      id: id,
      pos: _pos,
      result: result,
      success: _success,
    );

    memos.add(memo);
  }

  void _reset() {
    _c = _input[0];
    _error = 0;
    _expected = [];
    _failure = -1;
    _memoizable = [];
    _memoizable.length = 444;
    _memos = [];
    _memos.length = _input.length + 1;
    _pos = 0;
    _predicate = false;
    _success = false;
    _trackCid = [];
    _trackCid.length = 444;
    _trackPos = [];
    _trackPos.length = 444;
  }

  List<int> _toRunes(String source) {
    final length = source.length;
    final result = List<int>(length + 1);
    for (var pos = 0; pos < length;) {
      int c;
      final start = pos;
      final leading = source.codeUnitAt(pos++);
      if ((leading & 0xFC00) == 0xD800 && pos < length) {
        final trailing = source.codeUnitAt(pos);
        if ((trailing & 0xFC00) == 0xDC00) {
          c = 0x10000 + ((leading & 0x3FF) << 10) + (trailing & 0x3FF);
          pos++;
        } else {
          c = leading;
        }
      } else {
        c = leading;
      }

      result[start] = c;
    }

    result[length] = 0x110000;
    return result;
  }

  Grammar _parseGrammar(int $0, bool $1) {
    Grammar $2;
    final $4 = _c;
    final $5 = _pos;
    Grammar $6;
    _parse_leading_spaces(3, false);
    final $8 = _parse_globals(5, $1);
    final $9 = _parse_members(7, $1);
    List<ProductionRule> $10;
    if ($1) {
      $10 = [];
    }
    var $11 = false;
    for (;;) {
      final $12 = _parseDefinition(9, $1);
      if (!_success) {
        _success = $11;
        if (!_success) {
          $10 = null;
        }
        break;
      }
      if ($1) {
        $10.add($12);
      }
      $11 = true;
    }
    if (_success) {
      _parse_end_of_file(10, false);
      if (_success) {
        final g = $8;
        final m = $9;
        final d = $10;
        Grammar $$;
        $$ = Grammar(d, g, m);
        $6 = $$;
      }
    }
    if (!_success) {
      _c = $4;
      _pos = $5;
    }
    $2 = $6;
    if (!_success && _error == $5) {
      _fail(const [
        '\'non terminal name\'',
        '\'terminal name\'',
        '\'sub terminal name\'',
        '\'library prefix\'',
        '\'type name\''
      ]);
    }
    return $2;
  }

  ProductionRule _parseDefinition(int $0, bool $1) {
    ProductionRule $2;
    ProductionRule $3;
    final $5 = _pos;
    for (;;) {
      ProductionRule $6;
      final $7 = _parseNonterminalDefinition(13, $1);
      if (_success) {
        $6 = $7;
        $3 = $6;
        break;
      }
      ProductionRule $8;
      final $9 = _parseTerminalDefinition(15, $1);
      if (_success) {
        $8 = $9;
        $3 = $8;
        break;
      }
      ProductionRule $10;
      final $11 = _parseSubterminalDefinition(17, $1);
      if (_success) {
        $10 = $11;
        $3 = $10;
        break;
      }
      break;
    }
    if (!_success && _error == $5) {
      _fail(const [
        '\'non terminal name\'',
        '\'terminal name\'',
        '\'sub terminal name\'',
        '\'library prefix\'',
        '\'type name\''
      ]);
    }
    $2 = $3;
    return $2;
  }

  ProductionRule _parseNonterminalDefinition(int $0, bool $1) {
    ProductionRule $2;
    ProductionRule $3;
    final $4 = _c;
    final $5 = _pos;
    for (;;) {
      ProductionRule $6;
      final $7 = _parseType(20, $1);
      if (_success) {
        final $8 = _parse_non_terminal_name(21, $1);
        if (_success) {
          _parse_$EqualSign(22, false);
          if (_success) {
            final $10 = _parseNonterminalExpression(23, $1);
            if (_success) {
              _parse_$Semicolon(24, false);
              if (_success) {
                final t = $7;
                final n = $8;
                final e = $10;
                ProductionRule $$;
                $$ = ProductionRule(n, ProductionRuleKind.nonterminal, e, t);
                $6 = $$;
              }
            }
          }
        }
        if (!_success) {
          _c = $4;
          _pos = $5;
        }
      }
      if (_success) {
        $3 = $6;
        break;
      }
      _c = $4;
      _pos = $5;
      ProductionRule $12;
      final $13 = _parse_non_terminal_name(26, $1);
      if (_success) {
        _parse_$EqualSign(27, false);
        if (_success) {
          final $15 = _parseNonterminalExpression(28, $1);
          if (_success) {
            _parse_$Semicolon(29, false);
            if (_success) {
              final n = $13;
              final e = $15;
              ProductionRule $$;
              $$ = ProductionRule(n, ProductionRuleKind.nonterminal, e, null);
              $12 = $$;
            }
          }
        }
        if (!_success) {
          _c = $4;
          _pos = $5;
        }
      }
      if (_success) {
        $3 = $12;
        break;
      }
      _c = $4;
      _pos = $5;
      break;
    }
    if (!_success && _error == $5) {
      _fail(const [
        '\'non terminal name\'',
        '\'library prefix\'',
        '\'type name\''
      ]);
    }
    $2 = $3;
    return $2;
  }

  OrderedChoiceExpression _parseNonterminalExpression(int $0, bool $1) {
    OrderedChoiceExpression $2;
    final $4 = _c;
    final $5 = _pos;
    OrderedChoiceExpression $6;
    final $7 = _parseNonterminalSequence(32, $1);
    if (_success) {
      List<SequenceExpression> $8;
      if ($1) {
        $8 = [];
      }
      for (;;) {
        SequenceExpression $9;
        final $10 = _c;
        final $11 = _pos;
        SequenceExpression $12;
        _parse_$Slash(36, false);
        if (_success) {
          final $14 = _parseNonterminalSequence(37, $1);
          if (_success) {
            $12 = $14;
          } else {
            _c = $10;
            _pos = $11;
          }
        }
        $9 = $12;
        if (!_success && _error == $11) {
          _fail(const ['\'/\'']);
        }
        if (!_success) {
          _success = true;
          break;
        }
        if ($1) {
          $8.add($9);
        }
      }
      if (_success) {
        final e = $7;
        final n = $8;
        OrderedChoiceExpression $$;
        $$ = OrderedChoiceExpression([e, ...n]);
        $6 = $$;
      }
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $6;
    if (!_success && _error == $5) {
      _fail(const ['\'non terminal name\'', '\'terminal name\'', '\'(\'']);
    }
    return $2;
  }

  SequenceExpression _parseNonterminalSequence(int $0, bool $1) {
    SequenceExpression $2;
    final $4 = _c;
    final $5 = _pos;
    SequenceExpression $6;
    List<Expression> $7;
    if ($1) {
      $7 = [];
    }
    var $8 = false;
    for (;;) {
      final $9 = _parseNonterminalPrefix(41, $1);
      if (!_success) {
        _success = $8;
        if (!_success) {
          $7 = null;
        }
        break;
      }
      if ($1) {
        $7.add($9);
      }
      $8 = true;
    }
    if (_success) {
      final $10 = _parse_action(43, $1);
      _success = true;
      {
        final e = $7;
        final a = $10;
        SequenceExpression $$;
        $$ = SequenceExpression(e, a);
        $6 = $$;
      }
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $6;
    if (!_success && _error == $5) {
      _fail(const ['\'non terminal name\'', '\'terminal name\'', '\'(\'']);
    }
    return $2;
  }

  Expression _parseNonterminalPrefix(int $0, bool $1) {
    Expression $2;
    final $4 = _c;
    final $5 = _pos;
    Expression $6;
    final $7 = _parse_semantic_value(47, $1);
    String $8;
    final $10 = _pos;
    for (;;) {
      String $11;
      final $12 = _parse_$Ampersand(51, $1);
      if (_success) {
        $11 = $12;
        $8 = $11;
        break;
      }
      String $13;
      final $14 = _parse_$ExclamationMark(53, $1);
      if (_success) {
        $13 = $14;
        $8 = $13;
        break;
      }
      break;
    }
    if (!_success && _error == $10) {
      _fail(const ['\'&\'', '\'!\'']);
    }
    final $15 = _parseNonterminalSuffix(54, $1);
    if (_success) {
      final s = $7;
      final p = $8;
      final e = $15;
      Expression $$;
      $$ = _prefix(p, e, s);
      $6 = $$;
    }
    if (!_success) {
      _c = $4;
      _pos = $5;
    }
    $2 = $6;
    if (!_success && _error == $5) {
      _fail(const ['\'non terminal name\'', '\'terminal name\'', '\'(\'']);
    }
    return $2;
  }

  Expression _parseNonterminalSuffix(int $0, bool $1) {
    Expression $2;
    final $4 = _c;
    final $5 = _pos;
    Expression $6;
    final $7 = _parseNonterminalPrimary(57, $1);
    if (_success) {
      String $8;
      final $10 = _pos;
      for (;;) {
        String $11;
        final $12 = _parse_$QuestionMark(61, $1);
        if (_success) {
          $11 = $12;
          $8 = $11;
          break;
        }
        String $13;
        final $14 = _parse_$Asterisk(63, $1);
        if (_success) {
          $13 = $14;
          $8 = $13;
          break;
        }
        String $15;
        final $16 = _parse_$PlusSign(65, $1);
        if (_success) {
          $15 = $16;
          $8 = $15;
          break;
        }
        break;
      }
      if (!_success && _error == $10) {
        _fail(const ['\'?\'', '\'*\'', '\'+\'']);
      }
      _success = true;
      {
        final e = $7;
        final s = $8;
        Expression $$;
        $$ = _suffix(s, e);
        $6 = $$;
      }
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $6;
    if (!_success && _error == $5) {
      _fail(const ['\'non terminal name\'', '\'terminal name\'', '\'(\'']);
    }
    return $2;
  }

  Expression _parseNonterminalPrimary(int $0, bool $1) {
    Expression $2;
    Expression $3;
    final $4 = _c;
    final $5 = _pos;
    for (;;) {
      Expression $6;
      final $7 = _parse_non_terminal_name(68, $1);
      if (_success) {
        final n = $7;
        Expression $$;
        $$ = NonterminalExpression(n);
        $6 = $$;
      }
      if (_success) {
        $3 = $6;
        break;
      }
      Expression $8;
      final $9 = _parse_terminal_name(70, $1);
      if (_success) {
        final n = $9;
        Expression $$;
        $$ = TerminalExpression(n);
        $8 = $$;
      }
      if (_success) {
        $3 = $8;
        break;
      }
      Expression $10;
      _parse_$LeftParenthesis(72, false);
      if (_success) {
        final $12 = _parseNonterminalExpression(73, $1);
        if (_success) {
          _parse_$RightParenthesis(74, false);
          if (_success) {
            $10 = $12;
          }
        }
        if (!_success) {
          _c = $4;
          _pos = $5;
        }
      }
      if (_success) {
        $3 = $10;
        break;
      }
      _c = $4;
      _pos = $5;
      break;
    }
    if (!_success && _error == $5) {
      _fail(const ['\'non terminal name\'', '\'terminal name\'', '\'(\'']);
    }
    $2 = $3;
    return $2;
  }

  ProductionRule _parseTerminalDefinition(int $0, bool $1) {
    ProductionRule $2;
    ProductionRule $3;
    final $4 = _c;
    final $5 = _pos;
    for (;;) {
      ProductionRule $6;
      final $7 = _parseType(77, $1);
      if (_success) {
        final $8 = _parse_terminal_name(78, $1);
        if (_success) {
          _parse_$EqualSign(79, false);
          if (_success) {
            final $10 = _parseExpression(80, $1);
            if (_success) {
              _parse_$Semicolon(81, false);
              if (_success) {
                final t = $7;
                final n = $8;
                final e = $10;
                ProductionRule $$;
                $$ = ProductionRule(n, ProductionRuleKind.terminal, e, t);
                $6 = $$;
              }
            }
          }
        }
        if (!_success) {
          _c = $4;
          _pos = $5;
        }
      }
      if (_success) {
        $3 = $6;
        break;
      }
      _c = $4;
      _pos = $5;
      ProductionRule $12;
      final $13 = _parse_terminal_name(83, $1);
      if (_success) {
        _parse_$EqualSign(84, false);
        if (_success) {
          final $15 = _parseExpression(85, $1);
          if (_success) {
            _parse_$Semicolon(86, false);
            if (_success) {
              final n = $13;
              final e = $15;
              ProductionRule $$;
              $$ = ProductionRule(n, ProductionRuleKind.terminal, e, null);
              $12 = $$;
            }
          }
        }
        if (!_success) {
          _c = $4;
          _pos = $5;
        }
      }
      if (_success) {
        $3 = $12;
        break;
      }
      _c = $4;
      _pos = $5;
      break;
    }
    if (!_success && _error == $5) {
      _fail(const ['\'terminal name\'', '\'library prefix\'', '\'type name\'']);
    }
    $2 = $3;
    return $2;
  }

  OrderedChoiceExpression _parseExpression(int $0, bool $1) {
    OrderedChoiceExpression $2;
    final $4 = _c;
    final $5 = _pos;
    OrderedChoiceExpression $6;
    final $7 = _parseSequence(89, $1);
    if (_success) {
      List<SequenceExpression> $8;
      if ($1) {
        $8 = [];
      }
      for (;;) {
        SequenceExpression $9;
        final $10 = _c;
        final $11 = _pos;
        SequenceExpression $12;
        _parse_$Slash(93, false);
        if (_success) {
          final $14 = _parseSequence(94, $1);
          if (_success) {
            $12 = $14;
          } else {
            _c = $10;
            _pos = $11;
          }
        }
        $9 = $12;
        if (!_success && _error == $11) {
          _fail(const ['\'/\'']);
        }
        if (!_success) {
          _success = true;
          break;
        }
        if ($1) {
          $8.add($9);
        }
      }
      if (_success) {
        final e = $7;
        final n = $8;
        OrderedChoiceExpression $$;
        $$ = OrderedChoiceExpression([e, ...n]);
        $6 = $$;
      }
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $6;
    if (!_success && _error == $5) {
      _fail(const [
        '\'sub terminal name\'',
        '\'(\'',
        '\'literal\'',
        '\'character class\'',
        '\'.\'',
        '\'<\''
      ]);
    }
    return $2;
  }

  SequenceExpression _parseSequence(int $0, bool $1) {
    SequenceExpression $2;
    final $4 = _c;
    final $5 = _pos;
    SequenceExpression $6;
    List<Expression> $7;
    if ($1) {
      $7 = [];
    }
    var $8 = false;
    for (;;) {
      final $9 = _parsePrefix(98, $1);
      if (!_success) {
        _success = $8;
        if (!_success) {
          $7 = null;
        }
        break;
      }
      if ($1) {
        $7.add($9);
      }
      $8 = true;
    }
    if (_success) {
      final $10 = _parse_action(100, $1);
      _success = true;
      {
        final e = $7;
        final a = $10;
        SequenceExpression $$;
        $$ = SequenceExpression(e, a);
        $6 = $$;
      }
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $6;
    if (!_success && _error == $5) {
      _fail(const [
        '\'sub terminal name\'',
        '\'(\'',
        '\'literal\'',
        '\'character class\'',
        '\'.\'',
        '\'<\''
      ]);
    }
    return $2;
  }

  Expression _parsePrefix(int $0, bool $1) {
    Expression $2;
    final $4 = _c;
    final $5 = _pos;
    Expression $6;
    final $7 = _parse_semantic_value(104, $1);
    String $8;
    final $10 = _pos;
    for (;;) {
      String $11;
      final $12 = _parse_$Ampersand(108, $1);
      if (_success) {
        $11 = $12;
        $8 = $11;
        break;
      }
      String $13;
      final $14 = _parse_$ExclamationMark(110, $1);
      if (_success) {
        $13 = $14;
        $8 = $13;
        break;
      }
      break;
    }
    if (!_success && _error == $10) {
      _fail(const ['\'&\'', '\'!\'']);
    }
    final $15 = _parseSuffix(111, $1);
    if (_success) {
      final s = $7;
      final p = $8;
      final e = $15;
      Expression $$;
      $$ = _prefix(p, e, s);
      $6 = $$;
    }
    if (!_success) {
      _c = $4;
      _pos = $5;
    }
    $2 = $6;
    if (!_success && _error == $5) {
      _fail(const [
        '\'sub terminal name\'',
        '\'(\'',
        '\'literal\'',
        '\'character class\'',
        '\'.\'',
        '\'<\''
      ]);
    }
    return $2;
  }

  Expression _parseSuffix(int $0, bool $1) {
    Expression $2;
    final $4 = _c;
    final $5 = _pos;
    Expression $6;
    final $7 = _parsePrimary(114, $1);
    if (_success) {
      String $8;
      final $10 = _pos;
      for (;;) {
        String $11;
        final $12 = _parse_$QuestionMark(118, $1);
        if (_success) {
          $11 = $12;
          $8 = $11;
          break;
        }
        String $13;
        final $14 = _parse_$Asterisk(120, $1);
        if (_success) {
          $13 = $14;
          $8 = $13;
          break;
        }
        String $15;
        final $16 = _parse_$PlusSign(122, $1);
        if (_success) {
          $15 = $16;
          $8 = $15;
          break;
        }
        break;
      }
      if (!_success && _error == $10) {
        _fail(const ['\'?\'', '\'*\'', '\'+\'']);
      }
      _success = true;
      {
        final e = $7;
        final s = $8;
        Expression $$;
        $$ = _suffix(s, e);
        $6 = $$;
      }
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $6;
    if (!_success && _error == $5) {
      _fail(const [
        '\'sub terminal name\'',
        '\'(\'',
        '\'literal\'',
        '\'character class\'',
        '\'.\'',
        '\'<\''
      ]);
    }
    return $2;
  }

  Expression _parsePrimary(int $0, bool $1) {
    Expression $2;
    Expression $3;
    final $4 = _c;
    final $5 = _pos;
    for (;;) {
      Expression $6;
      final $7 = _parse_sub_terminal_name(125, $1);
      if (_success) {
        final n = $7;
        Expression $$;
        $$ = SubterminalExpression(n);
        $6 = $$;
      }
      if (_success) {
        $3 = $6;
        break;
      }
      Expression $8;
      _parse_$LeftParenthesis(127, false);
      if (_success) {
        final $10 = _parseExpression(128, $1);
        if (_success) {
          _parse_$RightParenthesis(129, false);
          if (_success) {
            $8 = $10;
          }
        }
        if (!_success) {
          _c = $4;
          _pos = $5;
        }
      }
      if (_success) {
        $3 = $8;
        break;
      }
      _c = $4;
      _pos = $5;
      Expression $12;
      final $13 = _parse_literal(131, $1);
      if (_success) {
        $12 = $13;
        $3 = $12;
        break;
      }
      Expression $14;
      final $15 = _parse_character_class(133, $1);
      if (_success) {
        $14 = $15;
        $3 = $14;
        break;
      }
      Expression $16;
      _parse_$Period(135, $1);
      if (_success) {
        Expression $$;
        $$ = AnyCharacterExpression();
        $16 = $$;
      }
      if (_success) {
        $3 = $16;
        break;
      }
      Expression $18;
      _parse_$LessThanSign(137, false);
      if (_success) {
        final $20 = _parseExpression(138, $1);
        if (_success) {
          _parse_$GreaterThanSign(139, false);
          if (_success) {
            final e = $20;
            Expression $$;
            $$ = CaptureExpression(e);
            $18 = $$;
          }
        }
        if (!_success) {
          _c = $4;
          _pos = $5;
        }
      }
      if (_success) {
        $3 = $18;
        break;
      }
      _c = $4;
      _pos = $5;
      break;
    }
    if (!_success && _error == $5) {
      _fail(const [
        '\'sub terminal name\'',
        '\'(\'',
        '\'literal\'',
        '\'character class\'',
        '\'.\'',
        '\'<\''
      ]);
    }
    $2 = $3;
    return $2;
  }

  ProductionRule _parseSubterminalDefinition(int $0, bool $1) {
    ProductionRule $2;
    ProductionRule $3;
    final $4 = _c;
    final $5 = _pos;
    for (;;) {
      ProductionRule $6;
      final $7 = _parseType(142, $1);
      if (_success) {
        final $8 = _parse_sub_terminal_name(143, $1);
        if (_success) {
          _parse_$EqualSign(144, false);
          if (_success) {
            final $10 = _parseExpression(145, $1);
            if (_success) {
              _parse_$Semicolon(146, false);
              if (_success) {
                final t = $7;
                final n = $8;
                final e = $10;
                ProductionRule $$;
                $$ = ProductionRule(n, ProductionRuleKind.subterminal, e, t);
                $6 = $$;
              }
            }
          }
        }
        if (!_success) {
          _c = $4;
          _pos = $5;
        }
      }
      if (_success) {
        $3 = $6;
        break;
      }
      _c = $4;
      _pos = $5;
      ProductionRule $12;
      final $13 = _parse_sub_terminal_name(148, $1);
      if (_success) {
        _parse_$EqualSign(149, false);
        if (_success) {
          final $15 = _parseExpression(150, $1);
          if (_success) {
            _parse_$Semicolon(151, false);
            if (_success) {
              final n = $13;
              final e = $15;
              ProductionRule $$;
              $$ = ProductionRule(n, ProductionRuleKind.subterminal, e, null);
              $12 = $$;
            }
          }
        }
        if (!_success) {
          _c = $4;
          _pos = $5;
        }
      }
      if (_success) {
        $3 = $12;
        break;
      }
      _c = $4;
      _pos = $5;
      break;
    }
    if (!_success && _error == $5) {
      _fail(const [
        '\'sub terminal name\'',
        '\'library prefix\'',
        '\'type name\''
      ]);
    }
    $2 = $3;
    return $2;
  }

  String _parseType(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $6;
    final $7 = _parseTypeName(154, $1);
    if (_success) {
      List<String> $8;
      final $9 = _c;
      final $10 = _pos;
      List<String> $11;
      _parse_$LessThanSign(158, false);
      if (_success) {
        final $13 = _parseTypeArguments(159, $1);
        if (_success) {
          _parse_$GreaterThanSign(160, false);
          if (_success) {
            $11 = $13;
          }
        }
        if (!_success) {
          _c = $9;
          _pos = $10;
        }
      }
      $8 = $11;
      if (!_success && _error == $10) {
        _fail(const ['\'<\'']);
      }
      _success = true;
      {
        final n = $7;
        final a = $8;
        String $$;
        $$ = n + (a == null ? '' : '<' + a.join(', ') + '>');
        $6 = $$;
      }
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $6;
    if (!_success && _error == $5) {
      _fail(const ['\'library prefix\'', '\'type name\'']);
    }
    return $2;
  }

  String _parseTypeName(int $0, bool $1) {
    String $2;
    String $3;
    final $4 = _c;
    final $5 = _pos;
    for (;;) {
      String $6;
      final $7 = _parse_library_prefix(163, $1);
      if (_success) {
        _parse_$Period(164, false);
        if (_success) {
          final $9 = _parse_type_name(165, $1);
          if (_success) {
            final p = $7;
            final n = $9;
            String $$;
            $$ = '$p.$n';
            $6 = $$;
          }
        }
        if (!_success) {
          _c = $4;
          _pos = $5;
        }
      }
      if (_success) {
        $3 = $6;
        break;
      }
      _c = $4;
      _pos = $5;
      String $10;
      final $11 = _parse_type_name(167, $1);
      if (_success) {
        $10 = $11;
        $3 = $10;
        break;
      }
      break;
    }
    if (!_success && _error == $5) {
      _fail(const ['\'library prefix\'', '\'type name\'']);
    }
    $2 = $3;
    return $2;
  }

  List<String> _parseTypeArguments(int $0, bool $1) {
    List<String> $2;
    final $4 = _c;
    final $5 = _pos;
    List<String> $6;
    final $7 = _parseType(170, $1);
    if (_success) {
      List<String> $8;
      if ($1) {
        $8 = [];
      }
      for (;;) {
        String $9;
        final $10 = _c;
        final $11 = _pos;
        String $12;
        _parse_$Comma(174, false);
        if (_success) {
          final $14 = _parseType(175, $1);
          if (_success) {
            $12 = $14;
          } else {
            _c = $10;
            _pos = $11;
          }
        }
        $9 = $12;
        if (!_success && _error == $11) {
          _fail(const ['\',\'']);
        }
        if (!_success) {
          _success = true;
          break;
        }
        if ($1) {
          $8.add($9);
        }
      }
      if (_success) {
        final t = $7;
        final n = $8;
        List<String> $$;
        $$ = [t, ...n];
        $6 = $$;
      }
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $6;
    if (!_success && _error == $5) {
      _fail(const ['\'library prefix\'', '\'type name\'']);
    }
    return $2;
  }

  String _parse_non_terminal_name(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    final $8 = _parse$$IDENTIFIER(178, $1);
    if (_success) {
      _parse$$SPACING(179, false);
      $7 = $8;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'non terminal name\'']);
    }
    return $2;
  }

  String _parse_terminal_name(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    String $8;
    final $9 = $1;
    $1 = false;
    if (_success = $4 == 39) {
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      var $15 = false;
      for (;;) {
        final $17 = _c;
        final $18 = _pos;
        final $21 = $1;
        $1 = false;
        if (_success = $17 == 39) {
          _c = _input[++_pos];
        } else {
          _failure = _pos;
        }
        _success = !_success;
        _c = $17;
        _pos = $18;
        $1 = $21;
        if (_success) {
          _parse$$TERMINAL_CHAR(191, false);
          if (!_success) {
            _c = $17;
            _pos = $18;
          }
        }
        if (!_success) {
          _success = $15;
          break;
        }
        $15 = true;
      }
      if (_success) {
        if (_success = _c == 39) {
          _c = _input[++_pos];
        } else {
          _failure = _pos;
        }
      }
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    if (_success) {
      $8 = _text.substring($5, _pos);
    }
    $1 = $9;
    if (_success) {
      _parse$$SPACING(193, false);
      $7 = $8;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'terminal name\'']);
    }
    return $2;
  }

  String _parse_sub_terminal_name(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    String $8;
    final $9 = $1;
    $1 = false;
    if (_success = $4 == 64) {
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      _parse$$IDENTIFIER(200, false);
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    if (_success) {
      $8 = _text.substring($5, _pos);
    }
    $1 = $9;
    if (_success) {
      _parse$$SPACING(201, false);
      $7 = $8;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'sub terminal name\'']);
    }
    return $2;
  }

  String _parse_semantic_value(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    final $8 = _parse$$IDENTIFIER(204, $1);
    if (_success) {
      if (_success = _c == 58) {
        _c = _input[++_pos];
      } else {
        _failure = _pos;
      }
      if (_success) {
        $7 = $8;
      } else {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'semantic value\'']);
    }
    return $2;
  }

  String _parse_type_name(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    String $8;
    final $9 = $1;
    $1 = false;
    _parse$$IDENTIFIER(211, false);
    if (_success) {
      if (_success = _c == 63) {
        _c = _input[++_pos];
      } else {
        _failure = _pos;
      }
      _success = true;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    if (_success) {
      $8 = _text.substring($5, _pos);
    }
    $1 = $9;
    if (_success) {
      _parse$$SPACING(214, false);
      $7 = $8;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'type name\'']);
    }
    return $2;
  }

  String _parse_library_prefix(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    String $8;
    final $9 = $1;
    $1 = false;
    if (_success = _c == 95) {
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    _parse$$IDENTIFIER(222, false);
    if (!_success) {
      _c = $4;
      _pos = $5;
    }
    if (_success) {
      $8 = _text.substring($5, _pos);
    }
    $1 = $9;
    if (_success) {
      $7 = $8;
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'library prefix\'']);
    }
    return $2;
  }

  String _parse_$Semicolon(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    String $8;
    if (_success = $4 == 59) {
      $8 = ';';
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      _parse$$SPACING(226, false);
      $7 = $8;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\';\'']);
    }
    return $2;
  }

  String _parse_action(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    if (_success = $4 == 123) {
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      String $9;
      final $10 = _pos;
      final $11 = $1;
      $1 = false;
      for (;;) {
        _parse$$ACTION_BODY(234, false);
        if (!_success) {
          _success = true;
          break;
        }
      }
      if (_success) {
        $9 = _text.substring($10, _pos);
      }
      $1 = $11;
      if (_success = _c == 125) {
        _c = _input[++_pos];
      } else {
        _failure = _pos;
      }
      if (_success) {
        _parse$$SPACING(236, false);
        $7 = $9;
      }
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'action\'']);
    }
    return $2;
  }

  String _parse_$Ampersand(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    String $8;
    if (_success = $4 == 38) {
      $8 = '&';
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      _parse$$SPACING(240, false);
      $7 = $8;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'&\'']);
    }
    return $2;
  }

  Expression _parse_character_class(int $0, bool $1) {
    Expression $2;
    final $4 = _c;
    final $5 = _pos;
    Expression $7;
    if (_success = $4 == 91) {
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      List<List<int>> $9;
      if ($1) {
        $9 = [];
      }
      var $10 = false;
      for (;;) {
        List<int> $11;
        final $12 = _c;
        final $13 = _pos;
        List<int> $15;
        final $16 = $1;
        $1 = false;
        if (_success = $12 == 93) {
          _c = _input[++_pos];
        } else {
          _failure = _pos;
        }
        _success = !_success;
        _c = $12;
        _pos = $13;
        $1 = $16;
        if (_success) {
          final $19 = _parse$$RANGE(249, $1);
          if (_success) {
            $15 = $19;
          } else {
            _c = $12;
            _pos = $13;
          }
        }
        $11 = $15;
        if (!_success) {
          _success = $10;
          if (!_success) {
            $9 = null;
          }
          break;
        }
        if ($1) {
          $9.add($11);
        }
        $10 = true;
      }
      if (_success) {
        if (_success = _c == 93) {
          _c = _input[++_pos];
        } else {
          _failure = _pos;
        }
        if (_success) {
          _parse$$SPACING(251, false);
          if (_success) {
            final r = $9;
            Expression $$;
            $$ = CharacterClassExpression(r);
            $7 = $$;
          }
        }
      }
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'character class\'']);
    }
    return $2;
  }

  String _parse_$RightParenthesis(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    String $8;
    if (_success = $4 == 41) {
      $8 = ')';
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      _parse$$SPACING(255, false);
      $7 = $8;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\')\'']);
    }
    return $2;
  }

  String _parse_$Period(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    String $8;
    if (_success = $4 == 46) {
      $8 = '.';
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      _parse$$SPACING(259, false);
      $7 = $8;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'.\'']);
    }
    return $2;
  }

  dynamic _parse_end_of_file(int $0, bool $1) {
    dynamic $2;
    final $4 = _c;
    final $5 = _pos;
    dynamic $7;
    final $8 = $1;
    $1 = false;
    if (_success = $4 < _eof) {
      _c = _input[_pos += $4 <= 65535 ? 1 : 2];
    } else {
      _failure = _pos;
    }
    _success = !_success;
    _c = $4;
    _pos = $5;
    $1 = $8;
    var $10;
    if (_success) {
      $7 = $10;
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'end of file\'']);
    }
    return $2;
  }

  String _parse_globals(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    if (_success = $4 == 37) {
      _matchString('%{');
    } else {
      _failure = _pos;
    }
    if (_success) {
      String $9;
      final $10 = _pos;
      final $11 = $1;
      $1 = false;
      for (;;) {
        _parse$$GLOBALS_BODY(271, false);
        if (!_success) {
          _success = true;
          break;
        }
      }
      if (_success) {
        $9 = _text.substring($10, _pos);
      }
      $1 = $11;
      if (_success = _c == 125) {
        _matchString('}%');
      } else {
        _failure = _pos;
      }
      if (_success) {
        _parse$$SPACING(273, false);
        $7 = $9;
      }
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'globals\'']);
    }
    return $2;
  }

  List _parse_leading_spaces(int $0, bool $1) {
    List $2;
    $2 = _parse$$SPACING(276, false);
    if (!_success && _error <= _failure) {
      _fail(const ['\'leading spaces\'']);
    }
    return $2;
  }

  String _parse_$EqualSign(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    String $8;
    if (_success = $4 == 61) {
      $8 = '=';
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      _parse$$SPACING(280, false);
      $7 = $8;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'=\'']);
    }
    return $2;
  }

  Expression _parse_literal(int $0, bool $1) {
    Expression $2;
    final $4 = _c;
    final $5 = _pos;
    Expression $7;
    if (_success = $4 == 34) {
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      List<int> $9;
      if ($1) {
        $9 = [];
      }
      for (;;) {
        int $10;
        final $11 = _c;
        final $12 = _pos;
        int $14;
        final $15 = $1;
        $1 = false;
        if (_success = $11 == 34) {
          _c = _input[++_pos];
        } else {
          _failure = _pos;
        }
        _success = !_success;
        _c = $11;
        _pos = $12;
        $1 = $15;
        if (_success) {
          final $18 = _parse$$LITERAL_CHAR(289, $1);
          if (_success) {
            $14 = $18;
          } else {
            _c = $11;
            _pos = $12;
          }
        }
        $10 = $14;
        if (!_success) {
          _success = true;
          break;
        }
        if ($1) {
          $9.add($10);
        }
      }
      if (_success = _c == 34) {
        _c = _input[++_pos];
      } else {
        _failure = _pos;
      }
      if (_success) {
        _parse$$SPACING(291, false);
        if (_success) {
          final c = $9;
          Expression $$;
          $$ = LiteralExpression(String.fromCharCodes(c));
          $7 = $$;
        }
      }
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'literal\'']);
    }
    return $2;
  }

  String _parse_members(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    if (_success = $4 == 123) {
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      String $9;
      final $10 = _pos;
      final $11 = $1;
      $1 = false;
      for (;;) {
        _parse$$ACTION_BODY(299, false);
        if (!_success) {
          _success = true;
          break;
        }
      }
      if (_success) {
        $9 = _text.substring($10, _pos);
      }
      $1 = $11;
      if (_success = _c == 125) {
        _c = _input[++_pos];
      } else {
        _failure = _pos;
      }
      if (_success) {
        _parse$$SPACING(301, false);
        $7 = $9;
      }
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'members\'']);
    }
    return $2;
  }

  String _parse_$ExclamationMark(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    String $8;
    if (_success = $4 == 33) {
      $8 = '!';
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      _parse$$SPACING(305, false);
      $7 = $8;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'!\'']);
    }
    return $2;
  }

  String _parse_$LeftParenthesis(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    String $8;
    if (_success = $4 == 40) {
      $8 = '(';
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      _parse$$SPACING(309, false);
      $7 = $8;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'(\'']);
    }
    return $2;
  }

  String _parse_$PlusSign(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    String $8;
    if (_success = $4 == 43) {
      $8 = '+';
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      _parse$$SPACING(313, false);
      $7 = $8;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'+\'']);
    }
    return $2;
  }

  String _parse_$Comma(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    String $8;
    if (_success = $4 == 44) {
      $8 = ',';
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      _parse$$SPACING(317, false);
      $7 = $8;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\',\'']);
    }
    return $2;
  }

  String _parse_$QuestionMark(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    String $8;
    if (_success = $4 == 63) {
      $8 = '?';
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      _parse$$SPACING(321, false);
      $7 = $8;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'?\'']);
    }
    return $2;
  }

  String _parse_$Slash(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    String $8;
    if (_success = $4 == 47) {
      $8 = '/';
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      _parse$$SPACING(325, false);
      $7 = $8;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'/\'']);
    }
    return $2;
  }

  String _parse_$Asterisk(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    String $8;
    if (_success = $4 == 42) {
      $8 = '*';
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      _parse$$SPACING(329, false);
      $7 = $8;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'*\'']);
    }
    return $2;
  }

  String _parse_$LessThanSign(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    String $8;
    if (_success = $4 == 60) {
      $8 = '<';
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      _parse$$SPACING(333, false);
      $7 = $8;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'<\'']);
    }
    return $2;
  }

  String _parse_$GreaterThanSign(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $7;
    String $8;
    if (_success = $4 == 62) {
      $8 = '>';
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      _parse$$SPACING(337, false);
      $7 = $8;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $7;
    if (!_success && _error <= _failure) {
      _fail(const ['\'>\'']);
    }
    return $2;
  }

  dynamic _parse$$ACTION_BODY(int $0, bool $1) {
    dynamic $2;
    dynamic $3;
    final $4 = _c;
    final $5 = _pos;
    for (;;) {
      String $6;
      String $7;
      if (_success = $4 == 123) {
        $7 = '{';
        _c = _input[++_pos];
      } else {
        _failure = _pos;
      }
      if (_success) {
        for (;;) {
          _parse$$ACTION_BODY(342, false);
          if (!_success) {
            _success = true;
            break;
          }
        }
        if (_success = _c == 125) {
          _c = _input[++_pos];
        } else {
          _failure = _pos;
        }
        if (_success) {
          $6 = $7;
        } else {
          _c = $4;
          _pos = $5;
        }
      }
      if (_success) {
        $3 = $6;
        break;
      }
      _c = $4;
      _pos = $5;
      dynamic $11;
      final $12 = $1;
      $1 = false;
      if (_success = $4 == 125) {
        _c = _input[++_pos];
      } else {
        _failure = _pos;
      }
      _success = !_success;
      _c = $4;
      _pos = $5;
      $1 = $12;
      var $14;
      if (_success) {
        if (_success = _c < _eof) {
          _c = _input[_pos += _c <= 65535 ? 1 : 2];
        } else {
          _failure = _pos;
        }
        if (_success) {
          $11 = $14;
        } else {
          _c = $4;
          _pos = $5;
        }
      }
      if (_success) {
        $3 = $11;
        break;
      }
      _c = $4;
      _pos = $5;
      break;
    }
    $2 = $3;
    return $2;
  }

  String _parse$$COMMENT(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $6;
    String $7;
    if (_success = $4 == 35) {
      $7 = '#';
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      for (;;) {
        final $10 = _c;
        final $11 = _pos;
        final $13 = $1;
        $1 = false;
        _parse$$EOL(355, false);
        _success = !_success;
        _c = $10;
        _pos = $11;
        $1 = $13;
        if (_success) {
          if (_success = _c < _eof) {
            _c = _input[_pos += _c <= 65535 ? 1 : 2];
          } else {
            _failure = _pos;
          }
          if (!_success) {
            _c = $10;
            _pos = $11;
          }
        }
        if (!_success) {
          _success = true;
          break;
        }
      }
      _parse$$EOL(358, false);
      _success = true;
      $6 = $7;
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $6;
    return $2;
  }

  dynamic _parse$$EOL(int $0, bool $1) {
    dynamic $2;
    dynamic $3;
    final $4 = _c;
    for (;;) {
      String $6;
      String $7;
      if (_success = $4 == 13) {
        $7 = _matchString('\r\n');
      } else {
        _failure = _pos;
      }
      if (_success) {
        $6 = $7;
        $3 = $6;
        break;
      }
      int $8;
      int $9;
      if (_success = $4 == 10 || $4 == 13) {
        $9 = _c;
        _c = _input[++_pos];
      } else {
        _failure = _pos;
      }
      if (_success) {
        $8 = $9;
        $3 = $8;
        break;
      }
      break;
    }
    $2 = $3;
    return $2;
  }

  dynamic _parse$$GLOBALS_BODY(int $0, bool $1) {
    dynamic $2;
    final $4 = _c;
    final $5 = _pos;
    dynamic $6;
    final $7 = $1;
    $1 = false;
    if (_success = $4 == 125) {
      _matchString('}%');
    } else {
      _failure = _pos;
    }
    _success = !_success;
    _c = $4;
    _pos = $5;
    $1 = $7;
    var $9;
    if (_success) {
      if (_success = _c < _eof) {
        _c = _input[_pos += _c <= 65535 ? 1 : 2];
      } else {
        _failure = _pos;
      }
      if (_success) {
        $6 = $9;
      } else {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $6;
    return $2;
  }

  int _parse$$HEX_NUMBER(int $0, bool $1) {
    int $2;
    final $4 = _c;
    final $5 = _pos;
    int $6;
    if (_success = $4 == 92) {
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      if (_success = _c == 117) {
        _c = _input[++_pos];
      } else {
        _failure = _pos;
      }
      if (_success) {
        String $9;
        final $10 = _pos;
        final $11 = $1;
        $1 = false;
        var $16 = false;
        for (;;) {
          if (_success = _c >= 48 && _c <= 57 ||
              _c >= 65 && _c <= 70 ||
              _c >= 97 && _c <= 102) {
            _c = _input[++_pos];
          } else {
            _failure = _pos;
          }
          if (!_success) {
            _success = $16;
            break;
          }
          $16 = true;
        }
        if (_success) {
          $9 = _text.substring($10, _pos);
        }
        $1 = $11;
        if (_success) {
          final d = $9;
          int $$;
          $$ = int.parse(d, radix: 16);
          $6 = $$;
        }
      }
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    $2 = $6;
    return $2;
  }

  String _parse$$IDENTIFIER(int $0, bool $1) {
    String $2;
    final $4 = _c;
    final $5 = _pos;
    String $6;
    String $7;
    final $8 = $1;
    $1 = false;
    _parse$$IDENT_START(383, false);
    if (_success) {
      for (;;) {
        _parse$$IDENT_CONT(385, false);
        if (!_success) {
          _success = true;
          break;
        }
      }
      if (!_success) {
        _c = $4;
        _pos = $5;
      }
    }
    if (_success) {
      $7 = _text.substring($5, _pos);
    }
    $1 = $8;
    if (_success) {
      $6 = $7;
    }
    $2 = $6;
    return $2;
  }

  int _parse$$IDENT_CONT(int $0, bool $1) {
    int $2;
    int $3;
    final $4 = _c;
    for (;;) {
      int $6;
      final $7 = _parse$$IDENT_START(388, false);
      if (_success) {
        $6 = $7;
        $3 = $6;
        break;
      }
      int $8;
      int $9;
      if (_success = $4 >= 48 && $4 <= 57 || $4 == 95) {
        $9 = _c;
        _c = _input[++_pos];
      } else {
        _failure = _pos;
      }
      if (_success) {
        $8 = $9;
        $3 = $8;
        break;
      }
      break;
    }
    $2 = $3;
    return $2;
  }

  int _parse$$IDENT_START(int $0, bool $1) {
    int $2;
    final $4 = _c;
    int $6;
    int $7;
    if (_success = $4 >= 65 && $4 <= 90 || $4 >= 97 && $4 <= 122) {
      $7 = _c;
      _c = _input[++_pos];
    } else {
      _failure = _pos;
    }
    if (_success) {
      $6 = $7;
    }
    $2 = $6;
    return $2;
  }

  int _parse$$LITERAL_CHAR(int $0, bool $1) {
    int $2;
    int $3;
    final $4 = _c;
    final $5 = _pos;
    for (;;) {
      int $6;
      if (_success = $4 == 92) {
        _c = _input[++_pos];
      } else {
        _failure = _pos;
      }
      if (_success) {
        int $8;
        if (_success =
            _c == 34 || _c == 92 || _c == 110 || _c == 114 || _c == 116) {
          $8 = _c;
          _c = _input[++_pos];
        } else {
          _failure = _pos;
        }
        if (_success) {
          final c = $8;
          int $$;
          $$ = _escape(c);
          $6 = $$;
        }
        if (!_success) {
          _c = $4;
          _pos = $5;
        }
      }
      if (_success) {
        $3 = $6;
        break;
      }
      _c = $4;
      _pos = $5;
      int $9;
      final $10 = _parse$$HEX_NUMBER(399, $1);
      if (_success) {
        $9 = $10;
        $3 = $9;
        break;
      }
      int $11;
      final $12 = $1;
      $1 = false;
      if (_success = $4 == 92) {
        _c = _input[++_pos];
      } else {
        _failure = _pos;
      }
      _success = !_success;
      _c = $4;
      _pos = $5;
      $1 = $12;
      if (_success) {
        final $15 = _c;
        final $16 = _pos;
        final $17 = $1;
        $1 = false;
        _parse$$EOL(404, false);
        _success = !_success;
        _c = $15;
        _pos = $16;
        $1 = $17;
        if (_success) {
          int $20;
          if (_success = _c < _eof) {
            $20 = _c;
            _c = _input[_pos += _c <= 65535 ? 1 : 2];
          } else {
            _failure = _pos;
          }
          if (_success) {
            $11 = $20;
          }
        }
        if (!_success) {
          _c = $4;
          _pos = $5;
        }
      }
      if (_success) {
        $3 = $11;
        break;
      }
      _c = $4;
      _pos = $5;
      break;
    }
    $2 = $3;
    return $2;
  }

  List<int> _parse$$RANGE(int $0, bool $1) {
    List<int> $2;
    List<int> $3;
    final $4 = _c;
    final $5 = _pos;
    for (;;) {
      List<int> $6;
      final $7 = _parse$$RANGE_CHAR(408, $1);
      if (_success) {
        if (_success = _c == 45) {
          _c = _input[++_pos];
        } else {
          _failure = _pos;
        }
        if (_success) {
          final $9 = _parse$$RANGE_CHAR(410, $1);
          if (_success) {
            final s = $7;
            final e = $9;
            List<int> $$;
            $$ = [s, e];
            $6 = $$;
          }
        }
        if (!_success) {
          _c = $4;
          _pos = $5;
        }
      }
      if (_success) {
        $3 = $6;
        break;
      }
      _c = $4;
      _pos = $5;
      List<int> $10;
      final $11 = _parse$$RANGE_CHAR(412, $1);
      if (_success) {
        final c = $11;
        List<int> $$;
        $$ = [c, c];
        $10 = $$;
      }
      if (_success) {
        $3 = $10;
        break;
      }
      break;
    }
    $2 = $3;
    return $2;
  }

  int _parse$$RANGE_CHAR(int $0, bool $1) {
    int $2;
    int $3;
    final $4 = _c;
    final $5 = _pos;
    for (;;) {
      int $6;
      if (_success = $4 == 92) {
        _c = _input[++_pos];
      } else {
        _failure = _pos;
      }
      if (_success) {
        int $8;
        if (_success =
            _c >= 92 && _c <= 93 || _c == 110 || _c == 114 || _c == 116) {
          $8 = _c;
          _c = _input[++_pos];
        } else {
          _failure = _pos;
        }
        if (_success) {
          final c = $8;
          int $$;
          $$ = _escape(c);
          $6 = $$;
        }
        if (!_success) {
          _c = $4;
          _pos = $5;
        }
      }
      if (_success) {
        $3 = $6;
        break;
      }
      _c = $4;
      _pos = $5;
      int $9;
      final $10 = _parse$$HEX_NUMBER(418, $1);
      if (_success) {
        $9 = $10;
        $3 = $9;
        break;
      }
      int $11;
      final $12 = $1;
      $1 = false;
      if (_success = $4 >= 92 && $4 <= 93) {
        _c = _input[++_pos];
      } else {
        _failure = _pos;
      }
      _success = !_success;
      _c = $4;
      _pos = $5;
      $1 = $12;
      if (_success) {
        final $15 = _c;
        final $16 = _pos;
        final $17 = $1;
        $1 = false;
        _parse$$EOL(423, false);
        _success = !_success;
        _c = $15;
        _pos = $16;
        $1 = $17;
        if (_success) {
          int $20;
          if (_success = _c < _eof) {
            $20 = _c;
            _c = _input[_pos += _c <= 65535 ? 1 : 2];
          } else {
            _failure = _pos;
          }
          if (_success) {
            $11 = $20;
          }
        }
        if (!_success) {
          _c = $4;
          _pos = $5;
        }
      }
      if (_success) {
        $3 = $11;
        break;
      }
      _c = $4;
      _pos = $5;
      break;
    }
    $2 = $3;
    return $2;
  }

  dynamic _parse$$SPACE(int $0, bool $1) {
    dynamic $2;
    dynamic $3;
    final $4 = _c;
    for (;;) {
      int $6;
      int $7;
      if (_success = $4 == 9 || $4 == 32) {
        $7 = _c;
        _c = _input[++_pos];
      } else {
        _failure = _pos;
      }
      if (_success) {
        $6 = $7;
        $3 = $6;
        break;
      }
      dynamic $8;
      final $9 = _parse$$EOL(429, false);
      if (_success) {
        $8 = $9;
        $3 = $8;
        break;
      }
      break;
    }
    $2 = $3;
    return $2;
  }

  List _parse$$SPACING(int $0, bool $1) {
    List $2;
    for (;;) {
      for (;;) {
        _parse$$SPACE(435, false);
        if (_success) {
          break;
        }
        _parse$$COMMENT(437, false);
        if (_success) {
          break;
        }
        break;
      }
      if (!_success) {
        _success = true;
        break;
      }
    }
    return $2;
  }

  int _parse$$TERMINAL_CHAR(int $0, bool $1) {
    int $2;
    int $3;
    final $4 = _c;
    final $5 = _pos;
    for (;;) {
      int $6;
      if (_success = $4 == 47) {
        _matchString('//');
      } else {
        _failure = _pos;
      }
      if (_success) {
        int $8;
        if (_success = _c == 39) {
          $8 = _c;
          _c = _input[++_pos];
        } else {
          _failure = _pos;
        }
        if (_success) {
          $6 = $8;
        } else {
          _c = $4;
          _pos = $5;
        }
      }
      if (_success) {
        $3 = $6;
        break;
      }
      _c = $4;
      _pos = $5;
      int $9;
      int $10;
      if (_success = $4 >= 32 && $4 <= 38 || $4 >= 40 && $4 <= 126) {
        $10 = _c;
        _c = _input[++_pos];
      } else {
        _failure = _pos;
      }
      if (_success) {
        $9 = $10;
        $3 = $9;
        break;
      }
      break;
    }
    $2 = $3;
    return $2;
  }
}

class _Memo {
  final int id;

  final int pos;

  final result;

  final bool success;

  _Memo({
    this.id,
    this.pos,
    this.result,
    this.success,
  });
}

// ignore_for_file: unused_element
// ignore_for_file: unused_field
